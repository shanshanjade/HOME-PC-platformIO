#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>

#define PIN D3

// Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8, PIN,
//   NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
//   NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
//   NEO_GRB            + NEO_KHZ800);

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8, PIN,
  NEO_MATRIX_TOP     + NEO_MATRIX_LEFT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG,
  NEO_GRB            + NEO_KHZ800);

const uint16_t colors[] = {matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255)};

const uint8_t guoshan[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x0C,0x10,0x10,0x00,0x0C,0xF3,0x3F,0xFC,0xFF,0x37,0x18,0x00,0x00,0x30,0x08,
0x00,0x80,0x30,0x0C,0xE0,0xFF,0x31,0x04,0x60,0xC0,0x30,0x04,0x60,0xC0,0x30,0x02,0x60,0xC0,0x30,0x02,0xE0,0xFF,0x30,0x01,0x60,0xC0,0x30,0x01,0x20,0x80,0x30,0x02,
0xF8,0xFF,0x31,0x02,0x00,0xC0,0x31,0x04,0x00,0x20,0x30,0x0C,0x00,0x1C,0x30,0x18,0x00,0x1C,0x30,0x18,0x00,0xCC,0x33,0x18,0xC0,0x3F,0x30,0x10,0xF8,0x0D,0x30,0x10,
0x18,0x0C,0x70,0x18,0x00,0x0C,0xB0,0x1F,0x00,0x0C,0x30,0x0E,0x00,0x0C,0x30,0x00,0xC0,0x0F,0x30,0x00,0x00,0x0E,0x30,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0xC0,0x00,0x03,0x00,0xC0,0xFF,0x07,0x00,0xC0,0x00,0x00,0x00,0xC0,0x00,0x08,
0xE0,0xFF,0xFF,0x1F,0x20,0x00,0x60,0x0C,0xF0,0xFF,0xFF,0x04,0x30,0x84,0x00,0x02,0x10,0xC6,0x11,0x00,0x00,0xEF,0xE1,0x03,0x80,0x73,0x86,0x07,0xC0,0x38,0x0C,0x06,
0x30,0x1C,0x38,0x04,0x00,0x0E,0xE0,0x01,0x00,0x03,0xC0,0x7F,0xC0,0xFE,0xFF,0x1E,0x30,0x06,0x60,0x00,0x0C,0x06,0x60,0x00,0x00,0xFE,0x7F,0x00,0x00,0x06,0x60,0x00,
0x00,0x06,0x60,0x00,0x00,0xFE,0x7F,0x00,0x00,0x06,0x60,0x00,0x00,0x06,0x60,0x00,0x00,0xFE,0x7F,0x00,0x00,0x06,0x60,0x00,0x00,0x06,0x60,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x10,0x00,0xC4,0xFF,0x3F,0xFC,0x4F,0x00,0x18,0xC0,0x70,0x00,0x08,0xC0,0x60,0x46,0x04,
0xC0,0x20,0x8E,0x01,0xC0,0x00,0x07,0x07,0xC0,0x00,0x03,0x0E,0xC0,0x80,0x01,0x1C,0xC0,0xC0,0x10,0x18,0xC0,0x26,0x30,0x08,0xFC,0x1F,0x10,0x00,0xC0,0x00,0x10,0x00,
0xC0,0x00,0x10,0x18,0xC0,0xF8,0xFF,0x3F,0xC0,0x00,0x3C,0x00,0xC0,0x00,0x5C,0x00,0xC0,0x00,0x56,0x00,0xC0,0x00,0x93,0x00,0xC0,0x0C,0x93,0x01,0xC0,0x83,0x11,0x03,
0xE0,0xC0,0x10,0x06,0x3C,0x60,0x10,0x0E,0x0C,0x30,0x10,0x3C,0x00,0x08,0x10,0x18,0x00,0x04,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00
};
const uint8_t guoshanV[] = {
  
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x30,0x08,0x08,0x00,0x30,0xCF,0xFC,0x3F,0xFF,0xEC,0x18,0x00,0x00,0x0C,0x10,
0x00,0x01,0x0C,0x30,0x07,0xFF,0x8C,0x20,0x06,0x03,0x0C,0x20,0x06,0x03,0x0C,0x40,0x06,0x03,0x0C,0x40,0x07,0xFF,0x0C,0x80,0x06,0x03,0x0C,0x80,0x04,0x01,0x0C,0x40,
0x1F,0xFF,0x8C,0x40,0x00,0x03,0x8C,0x20,0x00,0x04,0x0C,0x30,0x00,0x38,0x0C,0x18,0x00,0x38,0x0C,0x18,0x00,0x33,0xCC,0x18,0x03,0xFC,0x0C,0x08,0x1F,0xB0,0x0C,0x08,
0x18,0x30,0x0E,0x18,0x00,0x30,0x0D,0xF8,0x00,0x30,0x0C,0x70,0x00,0x30,0x0C,0x00,0x03,0xF0,0x0C,0x00,0x00,0x70,0x0C,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x03,0x00,0xC0,0x00,0x03,0xFF,0xE0,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x10,
0x07,0xFF,0xFF,0xF8,0x04,0x00,0x06,0x30,0x0F,0xFF,0xFF,0x20,0x0C,0x21,0x00,0x40,0x08,0x63,0x88,0x00,0x00,0xF7,0x87,0xC0,0x01,0xCE,0x61,0xE0,0x03,0x1C,0x30,0x60,
0x0C,0x38,0x1C,0x20,0x00,0x70,0x07,0x80,0x00,0xC0,0x03,0xFE,0x03,0x7F,0xFF,0x78,0x0C,0x60,0x06,0x00,0x30,0x60,0x06,0x00,0x00,0x7F,0xFE,0x00,0x00,0x60,0x06,0x00,
0x00,0x60,0x06,0x00,0x00,0x7F,0xFE,0x00,0x00,0x60,0x06,0x00,0x00,0x60,0x06,0x00,0x00,0x7F,0xFE,0x00,0x00,0x60,0x06,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x08,0x00,0x23,0xFF,0xFC,0x3F,0xF2,0x00,0x18,0x03,0x0E,0x00,0x10,0x03,0x06,0x62,0x20,
0x03,0x04,0x71,0x80,0x03,0x00,0xE0,0xE0,0x03,0x00,0xC0,0x70,0x03,0x01,0x80,0x38,0x03,0x03,0x08,0x18,0x03,0x64,0x0C,0x10,0x3F,0xF8,0x08,0x00,0x03,0x00,0x08,0x00,
0x03,0x00,0x08,0x18,0x03,0x1F,0xFF,0xFC,0x03,0x00,0x3C,0x00,0x03,0x00,0x3A,0x00,0x03,0x00,0x6A,0x00,0x03,0x00,0xC9,0x00,0x03,0x30,0xC9,0x80,0x03,0xC1,0x88,0xC0,
0x07,0x03,0x08,0x60,0x3C,0x06,0x08,0x70,0x30,0x0C,0x08,0x3C,0x00,0x10,0x08,0x18,0x00,0x20,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00
};

void setup(){
    Serial.begin(115200);
    matrix.begin();
    matrix.setTextWrap(false);
    matrix.setBrightness(10);
    matrix.setTextColor(colors[0]);
}
int y = 0;
void loop(){
    matrix.fillScreen(colors[2]);
    // matrix.drawXBitmap(0,y,guoshan,32,96,0xF800);
    matrix.drawBitmap(0,y,guoshanV,32,96,0xf800);
    y--;if(y < -96 ) y = 0;
    matrix.show();
    delay(100);
}


